#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBConnector
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="fujitsu")]
	public partial class FujitsuConnectorDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertsdk(sdk instance);
    partial void Updatesdk(sdk instance);
    partial void Deletesdk(sdk instance);
    partial void Insertsdk_mapping(sdk_mapping instance);
    partial void Updatesdk_mapping(sdk_mapping instance);
    partial void Deletesdk_mapping(sdk_mapping instance);
    #endregion
		
		public FujitsuConnectorDataContext() : 
				base(global::DBConnector.Properties.Settings.Default.fujitsuConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FujitsuConnectorDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FujitsuConnectorDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FujitsuConnectorDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FujitsuConnectorDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<sdk> sdks
		{
			get
			{
				return this.GetTable<sdk>();
			}
		}
		
		public System.Data.Linq.Table<sdk_mapping> sdk_mappings
		{
			get
			{
				return this.GetTable<sdk_mapping>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sdk")]
	public partial class sdk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public sdk()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.sdk_mappings")]
	public partial class sdk_mapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _model_identifier;
		
		private string _old_namespace;
		
		private string _new_namespace;
		
		private string _old_classname;
		
		private string _new_classname;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmodel_identifierChanging(string value);
    partial void Onmodel_identifierChanged();
    partial void Onold_namespaceChanging(string value);
    partial void Onold_namespaceChanged();
    partial void Onnew_namespaceChanging(string value);
    partial void Onnew_namespaceChanged();
    partial void Onold_classnameChanging(string value);
    partial void Onold_classnameChanged();
    partial void Onnew_classnameChanging(string value);
    partial void Onnew_classnameChanged();
    #endregion
		
		public sdk_mapping()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model_identifier", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string model_identifier
		{
			get
			{
				return this._model_identifier;
			}
			set
			{
				if ((this._model_identifier != value))
				{
					this.Onmodel_identifierChanging(value);
					this.SendPropertyChanging();
					this._model_identifier = value;
					this.SendPropertyChanged("model_identifier");
					this.Onmodel_identifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_old_namespace", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string old_namespace
		{
			get
			{
				return this._old_namespace;
			}
			set
			{
				if ((this._old_namespace != value))
				{
					this.Onold_namespaceChanging(value);
					this.SendPropertyChanging();
					this._old_namespace = value;
					this.SendPropertyChanged("old_namespace");
					this.Onold_namespaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_new_namespace", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string new_namespace
		{
			get
			{
				return this._new_namespace;
			}
			set
			{
				if ((this._new_namespace != value))
				{
					this.Onnew_namespaceChanging(value);
					this.SendPropertyChanging();
					this._new_namespace = value;
					this.SendPropertyChanged("new_namespace");
					this.Onnew_namespaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_old_classname", DbType="VarChar(MAX)")]
		public string old_classname
		{
			get
			{
				return this._old_classname;
			}
			set
			{
				if ((this._old_classname != value))
				{
					this.Onold_classnameChanging(value);
					this.SendPropertyChanging();
					this._old_classname = value;
					this.SendPropertyChanged("old_classname");
					this.Onold_classnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_new_classname", DbType="VarChar(MAX)")]
		public string new_classname
		{
			get
			{
				return this._new_classname;
			}
			set
			{
				if ((this._new_classname != value))
				{
					this.Onnew_classnameChanging(value);
					this.SendPropertyChanging();
					this._new_classname = value;
					this.SendPropertyChanged("new_classname");
					this.Onnew_classnameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
